#!/usr/bin/env python3

import argparse
import json
import os
import re
import subprocess
import sys
import csv
## Database Functions

def read_db(db):
	with open(db) as fp:
		return json.load(fp)

def write_db(db, d):
	with open(db, 'w') as fp:
		fp.write(json.dumps(d, indent=4))

def run(arg, cmd):
	if arg.verbose: print(cmd, file=sys.stderr, end=' ...')
	ret = subprocess.run(cmd, shell=True).returncode
	if ret != 0:
		raise Exception(f'{cmd} failed with status {ret}')
	if arg.verbose: print(f' done', file=sys.stderr)

## Subcommand Functions

def create(arg, env):
	db = f'{env}/seqxtant.json'
	if os.path.isfile(db):
		raise Exception(f'seqxtant databse already exists at {db}')
	write_db(db, {'state': 'ready', 'genomes': []})

def status(arg, env):
	db = f'{env}/seqxtant.json'
	if not os.path.isfile(db):
		raise Exception(f'{db} is not a seqxtant database location')
	print(f'Data location: {db}')
	d = read_db(db)
	print(f'Database status: {d["state"]}')
	print(f'Genomes: {len(d["genomes"])}')
	for genome in d['genomes']:
		print(f'\t{genome}')

def add_genome(arg, env):
	db = f'{env}/seqxtant.json'
	d = read_db(db)
	if d['state'] == 'busy' and not arg.force:
		raise Exception(f'cannot add genome, {db} is currently busy')
	if arg.genome in d['genomes'] and not arg.force:
		raise Exception(f'cannot add genome, {arg.genome} already present')

	# copy files to build directory under new names
	d['state'] = 'busy'
	write_db(db, d)

	xd = f'{arg.env}/{arg.genome}'
	mskxd = f'{arg.env}/{arg.genome}.masked'

	
	# make blast databases
	write_db(db, d)
	run(arg, f'xdformat -n -o {xd} -I {arg.fasta}')
	run(arg, f'xdformat -n -o {mskxd} -I {arg.masked}')
	
	# done
	if arg.genome not in d['genomes']: d['genomes'].append(arg.genome)
	d['state'] = 'ready'
	write_db(db, d)

def validate_genome(arg, env):
	db = f'{env}/seqxtant.json'
	d = read_db(db)
	
	if arg.genome not in d['genomes']:
		raise Exception(f'{arg.genome} not found in database')
	
	ff = f'--fasta {arg.env}/{arg.genome}.fa'
	g3 = f'--gff {arg.env}/{arg.genome}.gff3'
	ht = f'--html {arg.html} --tables {arg.tables}'
	
	run(arg, f'calfo --title {arg.genome} {ff} {g3} {ht}')

def cbe(s):
	m = re.search('(\S+):(\d+)\-(\d+)', s)
	if not m: raise Exception('location string malformed')
	c = m.group(1)
	b = int(m.group(2))
	e = int(m.group(3))
	return c, b, e

def store_fasta(arg, env, masked=False):
	c, b, e = cbe(arg.location)
	if masked:
		infile = f'{env}/{arg.genome}.masked'
		outfile = f'{arg.odir}/query.masked.fa'
	else:
		infile = f'{env}/{arg.genome}'
		outfile = f'{arg.odir}/query.fa'
	cmd = f'xdget -n -a {b} -b {e} {infile} {c}'	
	proc = subprocess.run(cmd, shell=True, capture_output=True)
	if proc.returncode != 0: raise Exception(f'xdget failed: {proc.stderr}')
	lines = proc.stdout.decode().split('\n')
	lines[0] = f'>{arg.genome}-{arg.location}'
	with open(outfile, 'w') as fp:
		for line in lines:
			fp.write(line)
			fp.write('\n')

def run_blast(arg, env, target):
	qf = f'{arg.odir}/query.masked.fa'
	db = f'{env}/{target}'
	of = f'{arg.odir}/{target}.blastn'
	params = (
		'-M 1 -N -1',          # +1/-1 scoring scheme, default 1/-3 too stringent
		'-Q 2 -R 2',           # gap penalty is constant -2
		'-W 10',               # wordsize
		'--gapE2 1e-10',       # e-value
		'-B 100 -V 100',       # limit the number of blast alignments
		'-links -topcomboN 5', # cluster
		'-mformat 2',
	)
	opts = ' '.join(params)
	cmd = f'ab-blastn {db} {qf} -o {of} {opts} -cpus {arg.cpus}'
	run(arg, cmd)
	
	# read HSPs
	hsps = []
	with open(of) as fp:
		for line in fp:
			if line.startswith('#'): continue
			qid, sid, e, n, sprime, s, alignlen, nident, npos, nmism, \
			pcident, pcpos, qgaps, qgaplen, sgaps, sgaplen, qframe, \
			qstart, qend, sframe, sstart, send, group, links \
			= line.split()
			if int(qframe) > 0:
				st = '+'
			else:
				st = '-'
				qstart, qend = qend, qstart
			hsps.append([
				sid, int(qstart), int(qend), int(sstart), int(send), 
				st, float(s), group, links
			])	
	return hsps



def cluster(arg, env):
	db = f'{env}/seqxtant.json'
	d = read_db(db)
	if d['state'] == 'busy': raise Exception(f'database is busy')
	
	store_fasta(arg, env,)
	store_fasta(arg, env, masked=True)
	
	if arg.limit: targets = arg.limit
	else:         targets = d['genomes']
	


# This is where we are stopped
	for target in targets:
		
		if arg.genome == target and not arg.paralogs: continue
		of = f'{arg.odir}/{target}.gff'

		hsps = run_blast(arg, env, target)

		# write gff file
		f = open(of, "w")
		writer = csv.writer(f, delimiter='\t', lineterminator='\n')
		f.write(f"## {hsps[0][0]} {hsps[0][5]}\n")
		
		group = 0
		start = 1e+20
		end = 0
		algns = []
		for algn in hsps:
			new_group = algn[0]
			if algn[3] < start: start = algn[3]
			if algn[4] > end: end = algn[4]
			if new_group != group:
				region = (
						algn[0], "prediction", "region", 
						start, end, ".", 
						algn[5], ".", "ID=homoregion"
				)
			
			algns.append(algn)
				
			writer.writerow(region)
			writer.writerows(
				(algn[0], "prediction", "alignment", 
				algn[3], algn[4], ".", algn[5], 
				".", "ID=alignment") 
				for algn in algns
			)
		f.close()


		# figure out how they are organized
		# get annotation from same region (and change coordinates?)
		# create a sub-location pair of files (fa, gff)
	
	# some kind of report on clustering
	# send to multiple align?
	

## CLI top-level ##
parser = argparse.ArgumentParser(description='genomic homology multi-mapper')
parser.add_argument('--env',
	help='set data location instead of $SEQXTANT')
parser.add_argument('--verbose', action='store_true',
	help='see behind the scenes messages')
subparsers = parser.add_subparsers(required=True,
	help='sub-commands')

### status sub-command
parse_status = subparsers.add_parser('status',
	help='get information about the database')
parse_status.set_defaults(func=status)

### create sub-command
parse_create = subparsers.add_parser('create',
	help='create a new database')
parse_create.set_defaults(func=create)

### add sub-command
parse_add = subparsers.add_parser('add',
	help='add new genome to database')
parse_add.add_argument('--genome', required=True,
	help='genome name, e.g. C.elegans')
parse_add.add_argument('--fasta', required=True,
	help='genome in fasta')
parse_add.add_argument('--masked', required=True,
	help='hard-masked genome in fasta')
parse_add.add_argument('--force', action='store_true',
	help='force overwrite of previous data')
parse_add.set_defaults(func=add_genome)

### validate sub-command
parse_validate = subparsers.add_parser('validate',
	help='validate genome to check for errors')
parse_validate.add_argument('--genome', required=True,
	help='genome name, e.g. C.elegans')
parse_validate.add_argument('--html', required=True,
	help='path to html output file')
parse_validate.add_argument('--tables', required=True,
	help='path to output directory')
parse_validate.set_defaults(func=validate_genome)

### cluster sub-command
parse_find = subparsers.add_parser('cluster',
	help='cluster related sequences')
parse_find.add_argument('--genome', required=True,
	help='genome name')
parse_find.add_argument('--location', required=True,
	help='chrom:begin-end')
parse_find.add_argument('--odir', required=True,
	help='path to output directory')
parse_find.add_argument('--limit', nargs='+', required=False,
	help='limit to specific genomes')
parse_find.add_argument('--cpus', type=int, required=False, default=1,
	help='number of cpus to use [%(default)i]')
parse_find.add_argument('--paralogs', action='store_true',
	help='include paralogs from host genome')
parse_find.set_defaults(func=cluster)

### sub-command checkpoint
try:
	arg = parser.parse_args()
except:
	print('seqxtant requires a sub-command, use --help for more info')
	sys.exit(1)

## Database location ##
if arg.env: env = arg.env
else:       env = os.getenv('SEQXTANT')
if not env: raise Exception('you must set SEQXTANT or use --env option')

## Run subcommand ##
arg.func(arg, env)
