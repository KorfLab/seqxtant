#!/usr/bin/env python3

import argparse
import json
import os
import re
import subprocess
import sys

## Database Functions

def read_db(db):
	with open(db) as fp:
		return json.load(fp)

def write_db(db, d):
	with open(db, 'w') as fp:
		fp.write(json.dumps(d, indent=4))

def run(arg, cmd):
	if arg.verbose: print(cmd, file=sys.stderr, end=' ...')
	ret = subprocess.run(cmd, shell=True).returncode
	if ret != 0:
		raise Exception(f'{cmd} failed with status {ret}')
	if arg.verbose: print(f' done', file=sys.stderr)

## Utilities

def read_fasta(filename):

	label = None
	seq = []

	fp = None
	if    filename == '-':         fp = sys.stdin
	elif filename.endswith('.gz'): fp = gzip.open(filename, 'rt')
	else:                          fp = open(filename)

	while True:
		line = fp.readline()
		if line == '': break
		line = line.rstrip()
		if line.startswith('>'):
			if len(seq) > 0:
				seq = ''.join(seq)
				yield(label, seq)
				label = line[1:]
				seq = []
			else:
				label = line[1:]
		else:
			seq.append(line)
	yield(label, ''.join(seq))
	fp.close()

def reverse_complement(seq):
	comp = str.maketrans('ACGTRYMKWSBDHVacgtrymkwsbdhv',
		'TGCAYRKMWSVHDBtgcayrkmwsvhdb')
	anti = seq.translate(comp)[::-1]
	return anti

def cbe(s):
	m = re.search('(\S+):([\d,]+)[\-\.]+([\d,]+)', s)
	if not m: raise Exception('location string malformed')
	c = m.group(1)
	b = int(m.group(2).replace(',', ''))
	e = int(m.group(3).replace(',', ''))
	return c, b, e

def decorate_exons(seq, c, b, e, gff3):
	found = []
	with open(gff3) as fp:
		for line in fp:
			if line.startswith('#'): continue
			f = line.split('\t')
			beg = int(f[3])
			end = int(f[4])
			if f[0] != c: continue
			if f[2] != 'CDS': continue
			if beg <= e and end >= b: found.append( (beg - b, end - b) )

	seq = list(seq.lower())
	for beg, end in found:
		for i in range(beg, end+1):
			seq[i] = seq[i].upper()
	return ''.join(seq)

def getseq(filename, c, b, e, anti=False, cds=False):
	seq = None
	for defline, dna in read_fasta(filename):
		words = defline.split()
		sid = words[0]
		if sid == c:
			seq = dna[b-1:e]
			break
	if seq is None: raise Exception('getseq error, malformed location?')
	if cds: seq = decorate_exons(seq.upper(), c, b, e, cds)
	if anti: seq = reverse_complement(seq)
	return seq

## Subcommand Functions

def create(arg, env):
	db = f'{env}/seqxtant.json'
	if not os.path.isdir(arg.env):
		os.mkdir(arg.env)
	if os.path.isfile(db):
		raise Exception(f'seqxtant databse already exists at {db}')
	write_db(db, {'state': 'ready', 'genomes': []})

def status(arg, env):
	db = f'{env}/seqxtant.json'
	if not os.path.isfile(db):
		raise Exception(f'{db} is not a seqxtant database location')
	print(f'Data location: {db}')
	d = read_db(db)
	print(f'Database status: {d["state"]}')
	print(f'Genomes: {len(d["genomes"])}')
	for genome in d['genomes']:
		print(f'\t{genome}')

def add_genome(arg, env):
	db = f'{env}/seqxtant.json'
	d = read_db(db)
	if d['state'] == 'busy' and not arg.force:
		raise Exception(f'cannot add genome, {db} is currently busy')
	if arg.genome in d['genomes'] and not arg.force:
		raise Exception(f'cannot add genome, {arg.genome} already present')

	if not os.path.isdir(arg.env):
		os.path.mkdir(arg.env)
	
	# copy files to build directory under new names
	d['state'] = 'busy'
	write_db(db, d)
	dna = f'{arg.env}/{arg.genome}.fa'
	gff  = f'{arg.env}/{arg.genome}.gff3'
	
	# genome
	if arg.fasta.endswith('.gz'):
		run(arg, f'cp -f {arg.fasta} {dna}.gz')
		run(arg, f'gunzip -f {dna}.gz')
	else:
		run(arg, f'cp -f {arg.fasta} {dna}')
	
	# gff3
	if arg.gff3.endswith('.gz'):
		run(arg, f'cp -f {arg.gff3} {gff}.gz')
		run(arg, f'gunzip -f {gff}.gz')
	else:
		run(arg, f'cp -f {arg.gff3} {gff}')
	
	# make blast database
	write_db(db, d)
	run(arg, f'xdformat -n -I {dna}')
	
	# done
	if arg.genome not in d['genomes']: d['genomes'].append(arg.genome)
	d['state'] = 'ready'
	write_db(db, d)

def validate_genome(arg, env):
	db = f'{env}/seqxtant.json'
	d = read_db(db)
	
	if arg.genome not in d['genomes']:
		raise Exception(f'{arg.genome} not found in database')
	
	ff = f'--fasta {arg.env}/{arg.genome}.fa'
	g3 = f'--gff {arg.env}/{arg.genome}.gff3'
	ht = f'--html {arg.html} --tables {arg.tables}'
	
	run(arg, f'calfo --title {arg.genome} {ff} {g3} {ht}')

def store_query(arg, env):
	c, b, e = cbe(arg.location)
	infile = f'{env}/{arg.genome}.fa'
	outfile = f'{arg.odir}/query.fa'
	seq = getseq(infile, c, b, e)
	with open(outfile, 'w') as fp:
		fp.write(f'>query\n')
		fp.write(seq)
	return len(seq)

def run_blast(arg, env, target):
	qf = f'{arg.odir}/query.fa'
	db = f'{env}/{target}.fa'
	of = f'{arg.odir}/{target}.blastn'
	
	if   arg.mask == 0: mask = ''
	elif arg.mask == 1: mask = 'lcmask'
	elif arg.mask == 2: mask = 'lcfilter'
	else: raise Exception('no')
		
	params = (
		'M=1 N=-1 Q=2 R=2',              # alignment
		'B=999 V=999 mformat=3',         # reporting
		'warnings',                      # quiet
		'golmax=10',
		mask,
		f'topcomboN={arg.maxgroups}',    # grouping
		f'E={arg.evalue}',               # filtering
		f'W={arg.wordsize}',             # capturing
		f'hspsepSmax={arg.maxintron}',   # genome-dependent
		f'cpus={arg.cpus}',
	)
	
	opts = ' '.join(params)
	cmd = f'ab-blastn {db} {qf} -o {of} {opts}'
	run(arg, cmd)
	
	# read and organize HSPs
	hsps = {}
	with open(of) as fp:
		for line in fp:
			if line.startswith('#'): continue
			f = line.split()
			qid = f[0]
			sid = f[1]
			ev = float(f[2])
			sc = int(f[5])
			st = f[16][0]
			qb = int(f[17])
			qe = int(f[18])
			sb = int(f[20])
			se = int(f[21])
			gr = f[22]
			if st == '-': (qb, qe) = (qe, qb)
			
			if sid not in hsps: hsps[sid] = {}
			if st not in hsps[sid]: hsps[sid][st] = {}
			if gr not in hsps[sid][st]: hsps[sid][st][gr] = []
			hsps[sid][st][gr].append( (qb, qe, sb, se, sc, ev) )
	
	for sid in hsps:
		for strand in hsps[sid]:
			for grp in hsps[sid][strand]:
				hsps[sid][strand][grp].sort( key=lambda x: x[0])
				yield qid, sid, strand, hsps[sid][strand][grp]


def cluster(arg, env):
	db = f'{env}/seqxtant.json'
	d = read_db(db)
	if d['state'] == 'busy': raise Exception(f'database is busy')
	
	if not os.path.isdir(arg.odir):
		os.mkdir(arg.odir)
	if not os.path.isdir(f'{arg.odir}/seqs'):
		os.mkdir(f'{arg.odir}/seqs')
	
	rlen = store_query(arg, env)
	
	if arg.limit: targets = arg.limit
	else:         targets = d['genomes']

	uid = 0
	summary = []
	for target in targets:
		filename = f'{env}/{target}.fa'
		if arg.genome == target and not arg.paralogs: continue
		for qid, sid, strand, hsps in run_blast(arg, env, target):
			qb = hsps[0][0]
			qe = hsps[-1][1]
			ev = hsps[0][5]
			if strand == '+':	
				sb = hsps[0][2]
				se = hsps[-1][3]
			else:
				sb = hsps[-1][2]
				se = hsps[0][3]
			seq = getseq(filename, sid, sb, se)
			loc = f'{target}:{sid}:{sb}-{se}{strand}'
			ls = len(seq)
			with open(f'{arg.odir}/seqs/{uid}.fa', 'w') as fp:
				fp.write(f'>{uid} {loc} {ev} {ls}\n')
				for i in range(0, len(seq), 80):
					fp.write(seq[i:i+80])
					fp.write('\n')
			summary.append( (uid, target, sid, sb, se, strand, ev, ls) )
			uid += 1
	
	# write summary file
	with open(f'{arg.odir}/summary.txt', 'w') as fp:
		for uid, tid, sid, sb, se, st, ev, ln in summary:
			fp.write(f'{uid}\t{tid}\t{sid}\t{sb}\t{se}\t{st}\t{ev}\t{ln}\n')

def fetch(arg, env):
	ff = f'{arg.env}/{arg.genome}.fa'
	if arg.cds: g3 = f'{arg.env}/{arg.genome}.gff3'
	else:       g3 = None
	c, b, e = cbe(arg.location)
	seq = getseq(ff, c, b, e, anti=arg.anti, cds=g3)
	print(seq)

## CLI top-level ##
parser = argparse.ArgumentParser(description='genomic homology multi-mapper')
parser.add_argument('--env',
	help='set data location instead of $SEQXTANT')
parser.add_argument('--verbose', action='store_true',
	help='see behind the scenes messages')
subparsers = parser.add_subparsers(required=True,
	help='sub-commands')

### status sub-command
parse_status = subparsers.add_parser('status',
	help='get information about the database')
parse_status.set_defaults(func=status)

### create sub-command
parse_create = subparsers.add_parser('create',
	help='create a new database')
parse_create.set_defaults(func=create)

### add sub-command
parse_add = subparsers.add_parser('add',
	help='add new genome to database')
parse_add.add_argument('--genome', required=True,
	help='genome name, e.g. C.elegans')
parse_add.add_argument('--fasta', required=True,
	help='genome in fasta with soft masking')
#parse_add.add_argument('--masked', required=True,
#	help='soft-masked genome in fasta')
parse_add.add_argument('--gff3', required=True,
	help='annotation in gff3')
parse_add.add_argument('--force', action='store_true',
	help='force overwrite of previous data')
parse_add.set_defaults(func=add_genome)

### validate sub-command
parse_validate = subparsers.add_parser('validate',
	help='validate genome to check for errors')
parse_validate.add_argument('--genome', required=True,
	help='genome name, e.g. C.elegans')
parse_validate.add_argument('--html', required=True,
	help='path to html output file')
parse_validate.add_argument('--tables', required=True,
	help='path to output directory')
parse_validate.set_defaults(func=validate_genome)

### cluster sub-command
parse_find = subparsers.add_parser('cluster',
	help='cluster related sequences')
parse_find.add_argument('--genome', required=True,
	help='genome name')
parse_find.add_argument('--location', required=True,
	help='chrom:begin-end or chrom:beg..end (commas ok)')
parse_find.add_argument('--wordsize', type=int, required=False, default=9,
	help='exact matches for seeding alignments [%(default)i]')
parse_find.add_argument('--evalue', type=float, required=False, default=1e-10,
	help='alignment E-value [%(default)g]')
parse_find.add_argument('--maxgroups', type=int, required=False, default=10,
	help='maximum number of alignment groups (genes-ish) [%(default)i]')
parse_find.add_argument('--maxintron', type=int, required=False, default=1000,
	help='maximum HSP separation [%(default)i]')
parse_find.add_argument('--odir', required=True,
	help='path to output directory')
parse_find.add_argument('--limit', nargs='+', required=False,
	help='limit to specific genomes')
parse_find.add_argument('--cpus', type=int, required=False, default=1,
	help='number of cpus to use [%(default)i]')
parse_find.add_argument('--mask', type=int, required=False, default=1,
	help='masking level (0=none, 1=seeds, 2=sequences')
parse_find.add_argument('--paralogs', action='store_true',
	help='include paralogs from host genome')
parse_find.set_defaults(func=cluster)

### getseq sub-command
parse_fetch = subparsers.add_parser('fetch',
	help='retrieve sequence')
parse_fetch.add_argument('--genome', required=True,
	help='genome name')
parse_fetch.add_argument('--location', required=True,
	help='chrom:begin-end or chrom:beg..end (commas ok)')
parse_fetch.add_argument('--cds', action='store_true',
	help='use case to display CDS/introns (default repeats)')
parse_fetch.add_argument('--anti', action='store_true',
	help='report anti-parallel strand')
parse_fetch.set_defaults(func=fetch)

### sub-command checkpoint
try:
	arg = parser.parse_args()
except:
	print('seqxtant requires a sub-command, use --help for more info')
	sys.exit(1)

## Database location ##
if arg.env: env = arg.env
else:       env = os.getenv('SEQXTANT')
if not env: raise Exception('you must set SEQXTANT or use --env option')

## Run subcommand ##
arg.func(arg, env)
